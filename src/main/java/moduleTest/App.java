/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package moduleTest;

import ch.bildspur.artnet.ArtNetBuffer;
import ch.bildspur.artnet.ArtNetClient;

import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Scanner;

public class App {

    public static void main(String[] args) throws SocketException {
        System.out.println("Sending DMX data...");

        byte[] dmxData_univ_01 = new byte[512];
        byte[] dmxData_univ_02 = new byte[512];
        byte[] dmxData_univ_03 = new byte[512];
        byte[] dmxData_univ_04 = new byte[512];
        byte[] dmxData_univ_05 = new byte[512];
        byte[] dmxData_univ_06 = new byte[512];
        byte[] dmxData_univ_07 = new byte[512];
        byte[] dmxData_univ_08 = new byte[512];

        int offset = 0;

        Enumeration<NetworkInterface> netInterfaces = NetworkInterface.getNetworkInterfaces();
        ArrayList<NetworkInterface> netInterfaceList = new ArrayList<NetworkInterface>();
        int nInterfaces = 0;
        while (netInterfaces.hasMoreElements()) {
            netInterfaceList.add(netInterfaces.nextElement());
            System.out.println("(" + nInterfaces + ") = " + netInterfaceList.get(nInterfaces).getDisplayName());
            nInterfaces++;
        }

//        Scanner interfaceScanner = new Scanner(System.in);
//        System.out.println("Select Network Interface: ");
//        String userInput = interfaceScanner.nextLine();
//        int choice = Integer.valueOf(userInput);
        int choice = 5;
        System.out.println("Selected " + netInterfaceList.get(choice).getDisplayName());

        NetworkInterface ni = netInterfaceList.get(choice);
        InetAddress address = ni.getInetAddresses().nextElement();

        ArtNetClient artnet = new ArtNetClient(new ArtNetBuffer(), 6454, 6454);
        artnet.start(address);

//        long startTime = System.currentTimeMillis();

        // send data to localhost
        boolean onFlag = false;
        int timeToRun = 99999999;
        int r_for_purple =  Math.round(255f*0.25f);

        long startTime = System.nanoTime();
//        long waitTime = 250000000l;
        long waitTime = 1000000000l;

//        int init_light_number = 16+16+16+16+16+16+16+16+16+16+16+16;
//        int init_light_number = 16*15;
        int init_light_number = 250;
        int light_number = init_light_number;
        while(true){
            if(onFlag == false){
                // ========= Universe 05 ===============
//                for (int j = 0; j < 512; j++){
//                    dmxData_univ_01[j] = (byte) 255;
//                }
//                for (int j = 240; j < 272; j++){
//                    dmxData_univ_01[j] = (byte) 255;
//                }

                dmxData_univ_01[light_number] = (byte) 255;
//                dmxData_univ_01[250] = (byte) 255;
//





//                dmxData_univ_02[0] = (byte) 0; // Adjust Pan motor
//                dmxData_univ_02[1] = (byte) 0; // Adjust Tilt motor
//                dmxData_univ_02[2] = (byte) 0; // Pan/Tilt Speed
//                dmxData_univ_02[3]= (byte) 255; // Dimmmer
//                dmxData_univ_02[4] = (byte) 0; // Strobe
//                dmxData_univ_02[5] = (byte) 255; // Red Dimmer
//                dmxData_univ_02[6] = (byte) 255; // Green Dimmer
//                dmxData_univ_02[7] = (byte) 255; // White Dimmer
//                dmxData_univ_02[8] = (byte) 255; // Orange Dimmer Dimmer
//                dmxData_univ_02[9] = (byte) 255; // UV Dimmer
//                dmxData_univ_02[10] = (byte) 0; // Motor auto modes
//                dmxData_univ_02[11] = (byte) 0; // Motor Sound sensitivity
//                dmxData_univ_02[12] = (byte) 0; // LED auto effect
//                dmxData_univ_02[13] = (byte) 0; // LED Sound sensitivity Dimmer
//                dmxData_univ_02[14] = (byte) 0; // Reset
            }else{
                for (int j = 0; j < 512; j++){
                    dmxData_univ_01[j] = (byte) 0;
                }

//                for (int j = 0; j < 512; j++){
//                    dmxData_univ_02[j] = (byte) 0;
//                }
            }

            if(startTime + waitTime < System.nanoTime()){
                startTime = System.nanoTime();
                if(onFlag){
                    onFlag = false;
                    System.out.println("Turning lights off.");
//                    light_number = light_number + 1;
//                    if (light_number > init_light_number + 15){
//                        light_number = init_light_number;
//                    }
                    System.out.println(light_number);
                }else{
                    onFlag = true;
                    System.out.println("Turning lights on.");
                }
            }

            String artnet_ip_addr = "192.168.1.2";

//            artnet.unicastDmx(artnet_ip_addr, 0, 1, dmxData_univ_01);
//            artnet.unicastDmx(artnet_ip_addr, 0, 2, dmxData_univ_02);

            artnet.unicastDmx(artnet_ip_addr, 0, 0, dmxData_univ_01);
//            artnet.unicastDmx(artnet_ip_addr, 0, 1, dmxData_univ_02);

//            artnet.broadcastDmx(0, 1, dmxData_univ_01);
//            artnet.broadcastDmx(0, 2, dmxData_univ_02);
//            artnet.broadcastDmx(0, 3, dmxData_univ_03);
//            artnet.broadcastDmx(0, 4, dmxData_univ_04);
//            artnet.broadcastDmx(0, 5, dmxData_univ_05);
//            artnet.broadcastDmx(0, 6, dmxData_univ_06);
//            artnet.broadcastDmx(0, 7, dmxData_univ_07);
//            artnet.broadcastDmx(0, 8, dmxData_univ_08);



//            try{
//                Thread.sleep(1500);
//            }catch(Exception ignored){
//                System.out.println("Failed to sleep?!");
//                System.exit(-1);
//            }
        }

//        artnet.stop();
    }
}
